#! /bin/python3
import boto3
import jmespath
import logging
import pprint

# USER DEFINED VARIABLES
OWNER_IDS = ['']

def set_up_logging():
	# create logger
	logger = logging.getLogger()
	logger.setLevel(logging.INFO)
	# create console handler and set level to debug
	ch = logging.StreamHandler()
	ch.setLevel(logging.INFO)
	# create formatter
	formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
	# add formatter to ch
	ch.setFormatter(formatter)
	# add ch to logger
	logger.addHandler(ch)


# Get all the avaialble regions
def get_all_regions():
	ec2_client = boto3.client('ec2')
	region_names = jmespath.search("Regions[*].RegionName",ec2_client.describe_regions(),)
	logging.info("List of regions \n%s\n", pprint.pformat(region_names))
	return region_names



def check_for_public_amis():

	region_names = get_all_regions()
	for region in region_names:
		logging.info("Scanning region %s", region)
		ec2_client = boto3.client('ec2', region_name=region)
		images = ec2_client.describe_images(Owners=OWNER_IDS)
		if len(images['Images']) > 0:
			image_names = jmespath.search("Images[*].Name",images)
			logging.info("\tNumber of images in %s : %d", region, len(image_names))
			logging.info("\tImage Names: \n\t\t\t\t\t\t\t%s",'\n\t\t\t\t\t\t\t'.join(image_names))


def check_for_public_snapshots():

	region_names = get_all_regions()
	for region in region_names:
		logging.info("Scanning region %s", region)
		ec2_client = boto3.client('ec2', region_name=region)
		snapshots = ec2_client.describe_snapshots(OwnerIds=OWNER_IDS)
		if len(snapshots['Snapshots']) > 0:
			snapshot_ids = jmespath.search("Snapshots[*].SnapshotId",snapshots)
			logging.info("\tNumber of snapshots in %s : %d", region, len(snapshot_ids))
			logging.info("\tImage Names: \n\t\t\t\t\t\t\t%s",'\n\t\t\t\t\t\t\t'.join(snapshot_ids))




if __name__ == "__main__":
	set_up_logging()
	check_for_public_amis()
	check_for_public_snapshots()


